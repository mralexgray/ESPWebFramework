# 1 "src/user_main.cpp"
# 1 "C:\\sviluppo\\ESP8266\\projects\\ESPWebFramework//"
# 1 "<command-line>"
# 1 "src/user_main.cpp"
# 23 "src/user_main.cpp"
extern "C"
{
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 1
# 9 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/c_types.h" 1
# 9 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/c_types.h"
typedef unsigned char uint8_t;
typedef signed char sint8_t;
typedef signed char int8_t;
typedef unsigned short uint16_t;
typedef signed short sint16_t;
typedef signed short int16_t;
typedef unsigned long uint32_t;
typedef signed long sint32_t;
typedef signed long int32_t;
typedef signed long long sint64_t;
typedef unsigned long long uint64_t;
typedef unsigned long long u_int64_t;
typedef float real32_t;
typedef double real64_t;

typedef unsigned char uint8;
typedef unsigned char u8;
typedef signed char sint8;
typedef signed char int8;
typedef signed char s8;
typedef unsigned short uint16;
typedef unsigned short u16;
typedef signed short sint16;
typedef signed short s16;
typedef unsigned int uint32;
typedef unsigned int u_int;
typedef unsigned int u32;
typedef signed int sint32;
typedef signed int s32;
typedef int int32;
typedef signed long long sint64;
typedef unsigned long long uint64;
typedef unsigned long long u64;
typedef float real32;
typedef double real64;



typedef unsigned int size_t;
typedef int ssize_t;
# 59 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/c_types.h"
typedef enum {
    OK = 0,
    FAIL,
    PENDING,
    BUSY,
    CANCEL,
} STATUS;
# 10 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_libc.h" 1
# 9 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_libc.h"
char *strcpy(char *dst, const char *src);
char *strncpy(char *dst, const char *src, size_t n);
int strcmp(const char *s1, const char *s2);
int strncmp(const char *s1, const char *s2, size_t n);
size_t strlen(const char *s);
char *strstr(const char *s1, const char *s2);
char *strcat(char *dst, const char *src);
char *strncat(char *dst, const char *src, size_t count);
size_t strspn(const char *s, const char *accept);
size_t strcspn(const char *s, const char *reject);
char *strtok_r(char *s, const char *delim, char **ptrptr);
char *strtok(char *s, const char *delim);
char *strrchr(const char *s, int c);
char *strdup(const char *s);
char *strchr(const char *s, int c);
long strtol(const char *str, char **endptr, int base);

void bzero(void *s, size_t n);

void *memcpy(void *dst, const void *src, size_t n);
void *memset(void *dst, int c, size_t n);
int memcmp(const void *m1, const void *m2, size_t n);
void *memmove(void *dst, const void *src, size_t n);

int rand_r(unsigned int *seed);
int rand(void);
void srand(unsigned int i);

int printf(const char *format, ...);
int sprintf(char *out, const char *format, ...);
int snprintf(char *buf, unsigned int count, const char *format, ...);
int puts(const char *str);
int putchar(int c);

void *malloc(size_t n);
void free(void *p);
void *calloc(size_t c, size_t n);
void *zalloc(size_t n);
void *realloc(void *p, size_t n);

int atoi(const char *s);
long atol(const char *s);
# 11 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_misc.h" 1
# 9 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_misc.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/ip_addr.h" 1
# 35 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/ip_addr.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/opt.h" 1
# 45 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/opt.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwipopts.h" 1
# 46 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/opt.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/debug.h" 1
# 35 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/debug.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/arch.h" 1
# 43 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/arch.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/arch/cc.h" 1
# 37 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/arch/cc.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/c_types.h" 1
# 38 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/arch/cc.h" 2
# 49 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/arch/cc.h"
typedef unsigned char u8_t;
typedef signed char s8_t;
typedef unsigned short u16_t;
typedef signed short s16_t;
typedef unsigned long u32_t;
typedef signed long s32_t;
typedef unsigned long mem_ptr_t;
typedef int sys_prot_t;
# 44 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/arch.h" 2
# 56 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/arch.h"
extern "C" {
# 208 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/arch.h"
extern int errno;





}
# 36 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/debug.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/opt.h" 1
# 37 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/debug.h" 2
# 47 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/opt.h" 2
# 36 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/ip_addr.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/def.h" 1
# 40 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/def.h"
extern "C" {
# 123 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/def.h"
}
# 37 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/ip_addr.h" 2

# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/ipv4/lwip/ip4_addr.h" 1
# 39 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/ipv4/lwip/ip4_addr.h"
extern "C" {




struct ip_addr {
  u32_t addr;
};







struct ip_addr_packed {
  u32_t addr;
} __attribute__((packed));







typedef struct ip_addr ip_addr_t;
typedef struct ip_addr_packed ip_addr_p_t;
# 74 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/ipv4/lwip/ip4_addr.h"

struct ip_addr2 {
  u16_t addrw[2];
} __attribute__((packed));






struct netif;

extern const ip_addr_t ip_addr_any;
extern const ip_addr_t ip_addr_broadcast;
# 203 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/ipv4/lwip/ip4_addr.h"
u8_t ip4_addr_isbroadcast(u32_t addr, const struct netif *netif);


u8_t ip4_addr_netmask_valid(u32_t netmask);
# 234 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/ipv4/lwip/ip4_addr.h"
u32_t ipaddr_addr(const char *cp);
int ipaddr_aton(const char *cp, ip_addr_t *addr);

char *ipaddr_ntoa(const ip_addr_t *addr);
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen);


}
# 39 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/ip_addr.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/ipv6/lwip/ip6_addr.h" 1
# 40 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/ip_addr.h" 2


extern "C" {
# 108 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/ip_addr.h"
typedef ip_addr_t ipX_addr_t;
# 127 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/lwip/lwip/ip_addr.h"
}
# 10 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_misc.h" 2
# 21 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_misc.h"
void os_delay_us(uint16 us);

void os_install_putc1(void (*p)(char c));
void os_putc(char c);
# 12 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_softap.h" 1
# 9 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_softap.h"
typedef enum _auth_mode {
    AUTH_OPEN = 0,
    AUTH_WEP,
    AUTH_WPA_PSK,
    AUTH_WPA2_PSK,
    AUTH_WPA_WPA2_PSK
} AUTH_MODE;

struct softap_config {
    uint8 ssid[32];
    uint8 password[64];
    uint8 ssid_len;
    uint8 channel;
    uint8 authmode;
    uint8 ssid_hidden;
    uint8 max_connection;
};

bool wifi_softap_get_config(struct softap_config *config);
bool wifi_softap_set_config(struct softap_config *config);
# 13 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_sta.h" 1
# 9 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_sta.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/queue.h" 1
# 10 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_sta.h" 2

struct station_config {
    uint8 ssid[32];
    uint8 password[64];
    uint8 bssid_set;
    uint8 bssid[6];
};

bool wifi_station_get_config(struct station_config *config);
bool wifi_station_set_config(struct station_config *config);

bool wifi_station_connect(void);
bool wifi_station_disconnect(void);

struct scan_config {
    uint8 *ssid;
    uint8 *bssid;
    uint8 channel;
    uint8 show_hidden;
};

struct bss_info {
    struct { struct bss_info *stqe_next; } next;

    uint8 bssid[6];
    uint8 ssid[32];
    uint8 channel;
    sint8 rssi;
    uint8 authmode;
    uint8 is_hidden;
};

typedef void (* scan_done_cb_t)(void *arg, STATUS status);

bool wifi_station_scan(struct scan_config *config, scan_done_cb_t cb);

uint8 wifi_station_get_auto_connect(void);
bool wifi_station_set_auto_connect(uint8 set);

enum {
    STATION_IDLE = 0,
    STATION_CONNECTING,
    STATION_WRONG_PASSWORD,
    STATION_NO_AP_FOUND,
    STATION_CONNECT_FAIL,
    STATION_GOT_IP
};

uint8 wifi_station_get_connect_status(void);
# 14 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_system.h" 1
# 11 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_system.h"
enum rst_reason {
 DEFAULT_RST_FLAG = 0,
 WDT_RST_FLAG = 1,
 EXP_RST_FLAG = 2
};

struct rst_info{
 uint32 flag;
 uint32 exccause;
 uint32 epc1;
 uint32 epc2;
 uint32 epc3;
 uint32 excvaddr;
 uint32 depc;
};

void system_restore(void);
void system_restart(void);
void system_deep_sleep(uint32 time_in_us);

uint32 system_get_time(void);

void system_print_meminfo(void);
uint32 system_get_free_heap_size(void);
uint32 system_get_chip_id(void);

uint32 system_rtc_clock_cali_proc(void);
uint32 system_get_rtc_time(void);

bool system_rtc_mem_read(uint8 src, void *dst, uint16 n);
bool system_rtc_mem_write(uint8 dst, const void *src, uint16 n);

void system_uart_swap(void);
# 15 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_timer.h" 1
# 10 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_timer.h"
typedef void os_timer_func_t(void *timer_arg);

typedef struct _os_timer_t {
 struct _os_timer_t *timer_next;
    void *freerots_handle;
    uint32 timer_expire;
    uint32 timer_period;
    os_timer_func_t *timer_func;
    bool timer_repeat_flag;
    void *timer_arg;
} os_timer_t;
# 16 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_wifi.h" 1
# 9 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_wifi.h"
enum {
 NULL_MODE = 0,
 STATION_MODE,
 SOFTAP_MODE,
 STATIONAP_MODE,
 MAX_MODE
};

uint8 wifi_get_opmode(void);
bool wifi_set_opmode(uint8 opmode);

enum {
 STATION_IF = 0,
 SOFTAP_IF,
 MAX_IF
};

struct ip_info {
    struct ip_addr ip;
    struct ip_addr netmask;
    struct ip_addr gw;
};

bool wifi_get_ip_info(uint8 if_index, struct ip_info *info);
bool wifi_set_ip_info(uint8 if_index, struct ip_info *info);
bool wifi_get_macaddr(uint8 if_index, uint8 *macaddr);
bool wifi_set_macaddr(uint8 if_index, uint8 *macaddr);

uint8 wifi_get_channel(void);
bool wifi_set_channel(uint8 channel);

void wifi_status_led_install(uint8 gpio_id, uint32 gpio_name, uint8 gpio_func);

void wifi_promiscuous_enable(uint8 promiscuous);

typedef void (* wifi_promiscuous_cb_t)(uint8 *buf, uint16 len);

void wifi_set_promiscuous_rx_cb(wifi_promiscuous_cb_t cb);

enum phy_mode {
 PHY_MODE_11B = 1,
 PHY_MODE_11G = 2,
 PHY_MODE_11N = 3
};

enum phy_mode wifi_get_phy_mode(void);
bool wifi_set_phy_mode(enum phy_mode mode);
# 17 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2

# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/esp8266.h" 1
# 9 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/esp8266.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/ets_sys.h" 1
# 10 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/esp8266.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/eagle_soc.h" 1
# 11 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/esp8266.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/gpio_register.h" 1
# 12 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/esp8266.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/pin_mux_register.h" 1
# 13 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/esp8266.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/spi_register.h" 1
# 14 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/esp8266.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/timer_register.h" 1
# 15 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/esp8266.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/uart_register.h" 1
# 16 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp8266/esp8266.h" 2
# 19 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2

# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/spi_flash.h" 1
# 9 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/spi_flash.h"
typedef enum {
    SPI_FLASH_RESULT_OK,
    SPI_FLASH_RESULT_ERR,
    SPI_FLASH_RESULT_TIMEOUT
} SpiFlashOpResult;



SpiFlashOpResult spi_flash_erase_sector(uint16 sec);
SpiFlashOpResult spi_flash_write(uint32 des_addr, uint32 *src_addr, uint32 size);
SpiFlashOpResult spi_flash_read(uint32 src_addr, uint32 *des_addr, uint32 size);
# 21 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2

# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/version.h" 1
# 23 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/espressif/esp_common.h" 2
# 26 "src/user_main.cpp" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/FreeRTOS.h" 1
# 72 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/FreeRTOS.h"
# 1 "c:\\sviluppo\\esp8266\\sdk\\xtensa-lx106-elf\\lib\\gcc\\xtensa-lx106-elf\\4.8.2\\include\\stddef.h" 1 3 4
# 147 "c:\\sviluppo\\esp8266\\sdk\\xtensa-lx106-elf\\lib\\gcc\\xtensa-lx106-elf\\4.8.2\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 212 "c:\\sviluppo\\esp8266\\sdk\\xtensa-lx106-elf\\lib\\gcc\\xtensa-lx106-elf\\4.8.2\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 73 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/FreeRTOS.h" 2


# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/projdefs.h" 1
# 69 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/projdefs.h"
typedef void (*pdTASK_CODE)( void * );
# 76 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/FreeRTOS.h" 2


# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/FreeRTOSConfig.h" 1
# 79 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/FreeRTOS.h" 2
# 87 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/FreeRTOS.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portable.h" 1
# 318 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portable.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portmacro.h" 1
# 70 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portmacro.h"
extern "C" {




# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/xtruntime.h" 1
# 29 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/xtruntime.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/core.h" 1
# 41 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/core.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h" 1
# 142 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
extern "C" {







extern const unsigned int Xthal_rev_no;







extern void xthal_save_extra(void *base);
extern void xthal_restore_extra(void *base);

extern void xthal_save_cpregs(void *base, int);
extern void xthal_restore_cpregs(void *base, int);

extern void xthal_save_cp0(void *base);
extern void xthal_save_cp1(void *base);
extern void xthal_save_cp2(void *base);
extern void xthal_save_cp3(void *base);
extern void xthal_save_cp4(void *base);
extern void xthal_save_cp5(void *base);
extern void xthal_save_cp6(void *base);
extern void xthal_save_cp7(void *base);
extern void xthal_restore_cp0(void *base);
extern void xthal_restore_cp1(void *base);
extern void xthal_restore_cp2(void *base);
extern void xthal_restore_cp3(void *base);
extern void xthal_restore_cp4(void *base);
extern void xthal_restore_cp5(void *base);
extern void xthal_restore_cp6(void *base);
extern void xthal_restore_cp7(void *base);

extern void* Xthal_cpregs_save_fn[8];
extern void* Xthal_cpregs_restore_fn[8];

extern void* Xthal_cpregs_save_nw_fn[8];
extern void* Xthal_cpregs_restore_nw_fn[8];





extern const unsigned int Xthal_extra_size;
extern const unsigned int Xthal_extra_align;
extern const unsigned int Xthal_cpregs_size[8];
extern const unsigned int Xthal_cpregs_align[8];
extern const unsigned int Xthal_all_extra_size;
extern const unsigned int Xthal_all_extra_align;

extern const char * const Xthal_cp_names[8];







extern void xthal_init_mem_extra(void *);

extern void xthal_init_mem_cp(void *, int);


extern const unsigned int Xthal_num_coprocessors;


extern const unsigned char Xthal_cp_num;

extern const unsigned char Xthal_cp_max;



extern const unsigned int Xthal_cp_mask;
# 239 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
extern const unsigned int Xthal_num_aregs;
extern const unsigned char Xthal_num_aregs_log2;







extern const unsigned char Xthal_icache_linewidth;
extern const unsigned char Xthal_dcache_linewidth;

extern const unsigned short Xthal_icache_linesize;
extern const unsigned short Xthal_dcache_linesize;


extern const unsigned int Xthal_icache_size;
extern const unsigned int Xthal_dcache_size;

extern const unsigned char Xthal_dcache_is_writeback;


extern void xthal_icache_region_invalidate( void *addr, unsigned size );
extern void xthal_dcache_region_invalidate( void *addr, unsigned size );
extern void xthal_icache_line_invalidate(void *addr);
extern void xthal_dcache_line_invalidate(void *addr);

extern void xthal_dcache_region_writeback( void *addr, unsigned size );
extern void xthal_dcache_line_writeback(void *addr);

extern void xthal_dcache_region_writeback_inv( void *addr, unsigned size );
extern void xthal_dcache_line_writeback_inv(void *addr);


extern void xthal_icache_sync( void );

extern void xthal_dcache_sync( void );


extern void xthal_cache_coherence_on( void );
extern void xthal_cache_coherence_off( void );

extern void xthal_cache_coherence_optin( void );
extern void xthal_cache_coherence_optout( void );




extern int xthal_set_cache_prefetch( int );
extern int xthal_get_cache_prefetch( void );







extern const int Xthal_debug_configured;


extern unsigned int xthal_set_soft_break(void *addr);
extern void xthal_remove_soft_break(void *addr, unsigned int);
# 318 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
extern int xthal_disassemble( unsigned char *instr_buf, void *tgt_addr,
         char *buffer, unsigned buflen, unsigned options );



extern int xthal_disassemble_size( unsigned char *instr_buf );






extern void* xthal_memcpy(void *dst, const void *src, unsigned len);
extern void* xthal_bcopy(const void *src, void *dst, unsigned len);






extern int xthal_compare_and_set( int *addr, int test_val, int compare_val );
# 347 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
extern const unsigned int Xthal_release_major;
extern const unsigned int Xthal_release_minor;
extern const char * const Xthal_release_name;
extern const char * const Xthal_release_internal;

extern const unsigned char Xthal_memory_order;
extern const unsigned char Xthal_have_windowed;
extern const unsigned char Xthal_have_density;
extern const unsigned char Xthal_have_booleans;
extern const unsigned char Xthal_have_loops;
extern const unsigned char Xthal_have_nsa;
extern const unsigned char Xthal_have_minmax;
extern const unsigned char Xthal_have_sext;
extern const unsigned char Xthal_have_clamps;
extern const unsigned char Xthal_have_mac16;
extern const unsigned char Xthal_have_mul16;
extern const unsigned char Xthal_have_fp;
extern const unsigned char Xthal_have_speculation;
extern const unsigned char Xthal_have_threadptr;

extern const unsigned char Xthal_have_pif;
extern const unsigned short Xthal_num_writebuffer_entries;

extern const unsigned int Xthal_build_unique_id;

extern const unsigned int Xthal_hw_configid0;
extern const unsigned int Xthal_hw_configid1;
extern const unsigned int Xthal_hw_release_major;
extern const unsigned int Xthal_hw_release_minor;
extern const char * const Xthal_hw_release_name;
extern const char * const Xthal_hw_release_internal;


}
# 566 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
extern "C" {
# 577 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
extern void xthal_window_spill( void );







extern void xthal_validate_cp(int);
extern void xthal_invalidate_cp(int);


extern void xthal_set_cpenable(unsigned);
extern unsigned xthal_get_cpenable(void);







extern const unsigned char Xthal_num_intlevels;

extern const unsigned char Xthal_num_interrupts;


extern const unsigned int Xthal_intlevel_mask[16];

extern const unsigned int Xthal_intlevel_andbelow_mask[16];


extern const unsigned char Xthal_intlevel[32];


extern const unsigned char Xthal_inttype[32];


extern const unsigned int Xthal_inttype_mask[7];


extern const int Xthal_timer_interrupt[4];


extern unsigned xthal_get_intenable( void );
extern void xthal_set_intenable( unsigned );
extern unsigned xthal_get_interrupt( void );

extern void xthal_set_intset( unsigned );
extern void xthal_set_intclear( unsigned );







extern const int Xthal_num_ibreak;
extern const int Xthal_num_dbreak;







extern const unsigned char Xthal_have_ccount;
extern const unsigned char Xthal_num_ccompare;


extern unsigned xthal_get_ccount(void);


extern void xthal_set_ccompare(int, unsigned);
extern unsigned xthal_get_ccompare(int);






extern const unsigned char Xthal_have_prid;
extern const unsigned char Xthal_have_exceptions;
extern const unsigned char Xthal_xea_version;
extern const unsigned char Xthal_have_interrupts;
extern const unsigned char Xthal_have_highlevel_interrupts;
extern const unsigned char Xthal_have_nmi;

extern unsigned xthal_get_prid( void );







extern unsigned xthal_vpri_to_intlevel(unsigned vpri);
extern unsigned xthal_intlevel_to_vpri(unsigned intlevel);


extern unsigned xthal_int_enable(unsigned);
extern unsigned xthal_int_disable(unsigned);


extern int xthal_set_int_vpri(int intnum, int vpri);
extern int xthal_get_int_vpri(int intnum);


extern void xthal_set_vpri_locklevel(unsigned intlevel);
extern unsigned xthal_get_vpri_locklevel(void);


extern unsigned xthal_set_vpri(unsigned vpri);
extern unsigned xthal_get_vpri(void);
extern unsigned xthal_set_vpri_intlevel(unsigned intlevel);
extern unsigned xthal_set_vpri_lock(void);






typedef void (XtHalVoidFunc)(void);


extern unsigned Xthal_tram_pending;
# 711 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
extern unsigned Xthal_tram_enabled;


extern unsigned Xthal_tram_sync;


extern unsigned xthal_tram_pending_to_service( void );
extern void xthal_tram_done( unsigned serviced_mask );
extern int xthal_tram_set_sync( int intnum, int sync );
extern XtHalVoidFunc* xthal_set_tram_trigger_func( XtHalVoidFunc *trigger_fn );






extern const unsigned char Xthal_num_instrom;
extern const unsigned char Xthal_num_instram;
extern const unsigned char Xthal_num_datarom;
extern const unsigned char Xthal_num_dataram;
extern const unsigned char Xthal_num_xlmi;



extern const unsigned int Xthal_instrom_vaddr[];
extern const unsigned int Xthal_instrom_paddr[];
extern const unsigned int Xthal_instrom_size [];
extern const unsigned int Xthal_instram_vaddr[];
extern const unsigned int Xthal_instram_paddr[];
extern const unsigned int Xthal_instram_size [];
extern const unsigned int Xthal_datarom_vaddr[];
extern const unsigned int Xthal_datarom_paddr[];
extern const unsigned int Xthal_datarom_size [];
extern const unsigned int Xthal_dataram_vaddr[];
extern const unsigned int Xthal_dataram_paddr[];
extern const unsigned int Xthal_dataram_size [];
extern const unsigned int Xthal_xlmi_vaddr[];
extern const unsigned int Xthal_xlmi_paddr[];
extern const unsigned int Xthal_xlmi_size [];







extern const unsigned char Xthal_icache_setwidth;
extern const unsigned char Xthal_dcache_setwidth;

extern const unsigned int Xthal_icache_ways;
extern const unsigned int Xthal_dcache_ways;

extern const unsigned char Xthal_icache_line_lockable;
extern const unsigned char Xthal_dcache_line_lockable;


extern unsigned xthal_get_cacheattr( void );
extern unsigned xthal_get_icacheattr( void );
extern unsigned xthal_get_dcacheattr( void );
extern void xthal_set_cacheattr( unsigned );
extern void xthal_set_icacheattr( unsigned );
extern void xthal_set_dcacheattr( unsigned );

extern int xthal_set_region_attribute( void *addr, unsigned size,
         unsigned cattr, unsigned flags );
# 784 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
extern void xthal_icache_enable( void );
extern void xthal_dcache_enable( void );

extern void xthal_icache_disable( void );
extern void xthal_dcache_disable( void );


extern void xthal_icache_all_invalidate( void );
extern void xthal_dcache_all_invalidate( void );

extern void xthal_dcache_all_writeback( void );

extern void xthal_dcache_all_writeback_inv( void );

extern void xthal_icache_region_lock( void *addr, unsigned size );
extern void xthal_dcache_region_lock( void *addr, unsigned size );
extern void xthal_icache_line_lock(void *addr);
extern void xthal_dcache_line_lock(void *addr);

extern void xthal_icache_all_unlock( void );
extern void xthal_dcache_all_unlock( void );
extern void xthal_icache_region_unlock( void *addr, unsigned size );
extern void xthal_dcache_region_unlock( void *addr, unsigned size );
extern void xthal_icache_line_unlock(void *addr);
extern void xthal_dcache_line_unlock(void *addr);
# 817 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
extern void xthal_memep_inject_error(void *addr, int size, int flags);







extern const unsigned char Xthal_have_spanning_way;
extern const unsigned char Xthal_have_identity_map;
extern const unsigned char Xthal_have_mimic_cacheattr;
extern const unsigned char Xthal_have_xlt_cacheattr;
extern const unsigned char Xthal_have_cacheattr;
extern const unsigned char Xthal_have_tlbs;

extern const unsigned char Xthal_mmu_asid_bits;
extern const unsigned char Xthal_mmu_asid_kernel;
extern const unsigned char Xthal_mmu_rings;
extern const unsigned char Xthal_mmu_ring_bits;
extern const unsigned char Xthal_mmu_sr_bits;
extern const unsigned char Xthal_mmu_ca_bits;
extern const unsigned int Xthal_mmu_max_pte_page_size;
extern const unsigned int Xthal_mmu_min_pte_page_size;

extern const unsigned char Xthal_itlb_way_bits;
extern const unsigned char Xthal_itlb_ways;
extern const unsigned char Xthal_itlb_arf_ways;
extern const unsigned char Xthal_dtlb_way_bits;
extern const unsigned char Xthal_dtlb_ways;
extern const unsigned char Xthal_dtlb_arf_ways;



extern int xthal_static_v2p( unsigned vaddr, unsigned *paddrp );
extern int xthal_static_p2v( unsigned paddr, unsigned *vaddrp, unsigned cached );



}
# 871 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
extern "C" {
# 920 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/hal.h"
}
# 42 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/core.h" 2






# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/core-isa.h" 1
# 49 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/core.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/core-matmap.h" 1
# 50 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/core.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/tie.h" 1
# 51 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/core.h" 2
# 1236 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/core.h"
extern const unsigned char Xthal_cp_id_XCHAL_CP0_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP0_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP1_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP1_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP2_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP2_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP3_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP3_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP4_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP4_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP5_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP5_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP6_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP6_IDENT;


extern const unsigned char Xthal_cp_id_XCHAL_CP7_IDENT;
extern const unsigned int Xthal_cp_mask_XCHAL_CP7_IDENT;
# 30 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/xtruntime.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/specreg.h" 1
# 32 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/specreg.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/corebits.h" 1
# 33 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/specreg.h" 2
# 31 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/xtruntime.h" 2
# 44 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/xtruntime.h"
extern "C" {




typedef void (_xtos_handler_func)(...);



typedef _xtos_handler_func *_xtos_handler;
# 141 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/xtruntime.h"
extern unsigned int _xtos_ints_off( unsigned int mask );
extern unsigned int _xtos_ints_on( unsigned int mask );
extern unsigned _xtos_set_intlevel( int intlevel );
extern unsigned _xtos_set_min_intlevel( int intlevel );
extern unsigned _xtos_restore_intlevel( unsigned restoreval );
extern unsigned _xtos_restore_just_intlevel( unsigned restoreval );
extern _xtos_handler _xtos_set_interrupt_handler( int n, _xtos_handler f );
extern _xtos_handler _xtos_set_interrupt_handler_arg( int n, _xtos_handler f, void *arg );
extern _xtos_handler _xtos_set_exception_handler( int n, _xtos_handler f );

extern void _xtos_memep_initrams( void );
extern void _xtos_memep_enable( int flags );


extern unsigned int _xtos_read_ints( void );
extern void _xtos_clear_ints( unsigned int mask );
# 165 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/xtruntime.h"
extern void _xtos_timer_0_delta( int cycles );
# 178 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/xtruntime.h"
}
# 76 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portmacro.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_rtos.h" 1
# 37 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_rtos.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/config/system.h" 1
# 38 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_rtos.h" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/extra_include/xtensa/simcall.h" 1
# 39 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_rtos.h" 2
# 154 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_rtos.h"
typedef unsigned (*XT_INTEXC_HOOK)(unsigned cause);
extern volatile XT_INTEXC_HOOK _xt_intexc_hooks[(1 + 2 + 1)];
# 168 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_rtos.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_context.h" 1
# 169 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_rtos.h" 2


# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_timer.h" 1
# 38 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_timer.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_rtos.h" 1
# 39 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_timer.h" 2
# 172 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/xtensa_rtos.h" 2
# 77 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portmacro.h" 2
# 97 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portmacro.h"
typedef unsigned long portTickType;
typedef unsigned int INT32U;
# 109 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portmacro.h"
extern void PendSV(char req);
extern char ClosedLv1Isr;
# 122 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portmacro.h"
extern void portDISABLE_INTERRUPTS( void );
extern void portENABLE_INTERRUPTS( void );
extern void vPortEnterCritical( void );
extern void vPortExitCritical( void );

extern unsigned cpu_sr;
# 142 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portmacro.h"
void __attribute__((section(".irom0.text"))) vPortEnterCritical1( void );
void __attribute__((section(".irom0.text"))) vPortExitCritical1( void );
# 184 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portmacro.h"
void _xt_user_exit (void);
void _xt_tick_timer_init (void);
void _xt_isr_unmask (uint32 unmask);
void _xt_isr_mask (uint32 mask);
uint32 _xt_read_ints (void);
void _xt_clear_ints(uint32 mask);



typedef void (* _xt_isr)(void);

void _xt_isr_attach (uint8 i, _xt_isr func);




}
# 319 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portable.h" 2
# 346 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portable.h"
extern "C" {


# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/mpu_wrappers.h" 1
# 350 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portable.h" 2
# 360 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portable.h"
 unsigned long *pxPortInitialiseStack( unsigned long *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters ) ;





void *pvPortMalloc( size_t xSize ) ;
void vPortFree( void *pv ) ;
void vPortInitialiseBlocks( void ) ;
size_t xPortGetFreeHeapSize( void ) ;





long xPortStartScheduler( void ) ;






void vPortEndScheduler( void ) ;
# 397 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/portable.h"
}
# 88 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/FreeRTOS.h" 2




typedef long (*pdTASK_HOOK_CODE)( void * );
# 27 "src/user_main.cpp" 2
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h" 1
# 73 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/list.h" 1
# 130 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/list.h"
extern "C" {




struct xLIST_ITEM
{
 portTickType xItemValue;
 struct xLIST_ITEM * pxNext;
 struct xLIST_ITEM * pxPrevious;
 void * pvOwner;
 void * pvContainer;
};
typedef struct xLIST_ITEM xListItem;

struct xMINI_LIST_ITEM
{
 portTickType xItemValue;
 struct xLIST_ITEM * pxNext;
 struct xLIST_ITEM * pxPrevious;
};
typedef struct xMINI_LIST_ITEM xMiniListItem;




typedef struct xLIST
{
 unsigned long uxNumberOfItems;
 xListItem * pxIndex;
 xMiniListItem xListEnd;
} xList;
# 311 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/list.h"
void vListInitialise( xList * const pxList );
# 322 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/list.h"
void vListInitialiseItem( xListItem * const pxItem );
# 335 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/list.h"
void vListInsert( xList * const pxList, xListItem * const pxNewListItem );
# 356 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/list.h"
void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem );
# 371 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/list.h"
unsigned long uxListRemove( xListItem * const pxItemToRemove );


}
# 74 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h" 2


extern "C" {
# 95 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
typedef void * xTaskHandle;


typedef enum
{
 eRunning = 0,
 eReady,
 eBlocked,
 eSuspended,
 eDeleted
} eTaskState;




typedef struct xTIME_OUT
{
 long xOverflowCount;
 portTickType xTimeOnEntering;
} xTimeOutType;




typedef struct xMEMORY_REGION
{
 void *pvBaseAddress;
 unsigned long ulLengthInBytes;
 unsigned long ulParameters;
} xMemoryRegion;




typedef struct xTASK_PARAMTERS
{
 pdTASK_CODE pvTaskCode;
 const signed char * const pcName;
 unsigned short usStackDepth;
 void *pvParameters;
 unsigned long uxPriority;
 unsigned long *puxStackBuffer;
 xMemoryRegion xRegions[ 1 ];
} xTaskParameters;



typedef struct xTASK_STATUS
{
 xTaskHandle xHandle;
 const signed char *pcTaskName;
 unsigned long xTaskNumber;
 eTaskState eCurrentState;
 unsigned long uxCurrentPriority;
 unsigned long uxBasePriority;
 unsigned long ulRunTimeCounter;
 unsigned short usStackHighWaterMark;
} xTaskStatusType;


typedef enum
{
 eAbortSleep = 0,
 eStandardSleep,
 eNoTasksWaitingTimeout
} eSleepModeStatus;
# 430 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions ) ;
# 471 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskDelete( xTaskHandle xTaskToDelete ) ;
# 525 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskDelay( portTickType xTicksToDelay ) ;
# 584 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement ) ;
# 631 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
unsigned long uxTaskPriorityGet( xTaskHandle xTask ) ;
# 649 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
eTaskState eTaskGetState( xTaskHandle xTask ) ;
# 691 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskPrioritySet( xTaskHandle xTask, unsigned long uxNewPriority ) ;
# 742 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskSuspend( xTaskHandle xTaskToSuspend ) ;
# 791 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskResume( xTaskHandle xTaskToResume ) ;
# 811 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
long xTaskResumeFromISR( xTaskHandle xTaskToResume ) ;
# 849 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskStartScheduler( void ) ;
# 902 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskEndScheduler( void ) ;
# 953 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskSuspendAll( void ) ;
# 1005 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
signed long xTaskResumeAll( void ) ;
# 1016 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
signed long xTaskIsTaskSuspended( xTaskHandle xTask ) ;
# 1031 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
portTickType xTaskGetTickCount( void ) ;
# 1047 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
portTickType xTaskGetTickCountFromISR( void ) ;
# 1061 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
unsigned long uxTaskGetNumberOfTasks( void ) ;
# 1075 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery );
# 1095 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
unsigned long uxTaskGetStackHighWaterMark( xTaskHandle xTask ) ;
# 1135 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
long xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter ) ;
# 1144 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
xTaskHandle xTaskGetIdleTaskHandle( void );
# 1243 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
unsigned long uxTaskGetSystemState( xTaskStatusType *pxTaskStatusArray, unsigned long uxArraySize, unsigned long *pulTotalRunTime );
# 1290 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskList( signed char *pcWriteBuffer ) ;
# 1344 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskGetRunTimeStats( signed char *pcWriteBuffer ) ;
# 1365 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
long xTaskIncrementTick( void ) ;
# 1388 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait ) ;
# 1403 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait ) ;
# 1420 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
signed long xTaskRemoveFromEventList( const xList * const pxEventList ) ;
# 1430 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskSwitchContext( void ) ;




xTaskHandle xTaskGetCurrentTaskHandle( void ) ;




void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut ) ;





long xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait ) ;





void vTaskMissedYield( void ) ;





long xTaskGetSchedulerState( void ) ;





void vTaskPriorityInherit( xTaskHandle const pxMutexHolder ) ;





void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder ) ;





signed long xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned long uxPriority, xTaskHandle *pxCreatedTask, unsigned long *puxStackBuffer, const xMemoryRegion * const xRegions ) ;




unsigned long uxTaskGetTaskNumber( xTaskHandle xTask );





void vTaskSetTaskNumber( xTaskHandle xTask, unsigned long uxHandle );
# 1496 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
void vTaskStepTick( portTickType xTicksToJump );
# 1511 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/task.h"
eSleepModeStatus eTaskConfirmSleepModeStatus( void );


}
# 28 "src/user_main.cpp" 2
# 1 "c:\\sviluppo\\esp8266\\sdk\\xtensa-lx106-elf\\lib\\gcc\\xtensa-lx106-elf\\4.8.2\\include\\stdarg.h" 1 3 4
# 40 "c:\\sviluppo\\esp8266\\sdk\\xtensa-lx106-elf\\lib\\gcc\\xtensa-lx106-elf\\4.8.2\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 98 "c:\\sviluppo\\esp8266\\sdk\\xtensa-lx106-elf\\lib\\gcc\\xtensa-lx106-elf\\4.8.2\\include\\stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 29 "src/user_main.cpp" 2
}

# 1 "src/fdvserial.h" 1
# 26 "src/fdvserial.h"
extern "C"
{




}


# 1 "src/fdvsync.h" 1
# 27 "src/fdvsync.h"
extern "C"
{


# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/semphr.h" 1
# 72 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/semphr.h"
# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h" 1
# 74 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
extern "C" {
# 83 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
typedef void * xQueueHandle;






typedef void * xQueueSetHandle;






typedef void * xQueueSetMemberHandle;
# 587 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
signed long xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, long xCopyPosition ) ;
# 716 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
signed long xQueuePeekFromISR( xQueueHandle xQueue, const void * const pvBuffer ) ;
# 908 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
signed long xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, long xJustPeek ) ;
# 923 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
unsigned long uxQueueMessagesWaiting( const xQueueHandle xQueue ) ;
# 937 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
void vQueueDelete( xQueueHandle xQueue ) ;
# 1317 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
signed long xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed long *pxHigherPriorityTaskWoken, long xCopyPosition ) ;
# 1406 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
signed long xQueueReceiveFromISR( xQueueHandle xQueue, const void * const pvBuffer, signed long *pxHigherPriorityTaskWoken ) ;





signed long xQueueIsQueueEmptyFromISR( const xQueueHandle xQueue ) ;
signed long xQueueIsQueueFullFromISR( const xQueueHandle xQueue ) ;
unsigned long uxQueueMessagesWaitingFromISR( const xQueueHandle xQueue ) ;
# 1431 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
signed long xQueueAltGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, long xCopyPosition );
signed long xQueueAltGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, long xJustPeeking );
# 1447 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
signed long xQueueCRSendFromISR( xQueueHandle xQueue, const void *pvItemToQueue, signed long xCoRoutinePreviouslyWoken );
signed long xQueueCRReceiveFromISR( xQueueHandle xQueue, void *pvBuffer, signed long *pxTaskWoken );
signed long xQueueCRSend( xQueueHandle xQueue, const void *pvItemToQueue, portTickType xTicksToWait );
signed long xQueueCRReceive( xQueueHandle xQueue, void *pvBuffer, portTickType xTicksToWait );






xQueueHandle xQueueCreateMutex( unsigned char ucQueueType ) ;
xQueueHandle xQueueCreateCountingSemaphore( unsigned long uxCountValue, unsigned long uxInitialCount ) ;
void* xQueueGetMutexHolder( xQueueHandle xSemaphore ) ;





long xQueueTakeMutexRecursive( xQueueHandle xMutex, portTickType xBlockTime ) ;
long xQueueGiveMutexRecursive( xQueueHandle pxMutex ) ;
# 1518 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
xQueueHandle xQueueGenericCreate( unsigned long uxQueueLength, unsigned long uxItemSize, unsigned char ucQueueType ) ;
# 1568 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
xQueueSetHandle xQueueCreateSet( unsigned long uxEventQueueLength ) ;
# 1592 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
long xQueueAddToSet( xQueueSetMemberHandle xQueueOrSemaphore, xQueueSetHandle xQueueSet ) ;
# 1611 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
long xQueueRemoveFromSet( xQueueSetMemberHandle xQueueOrSemaphore, xQueueSetHandle xQueueSet ) ;
# 1647 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h"
xQueueSetMemberHandle xQueueSelectFromSet( xQueueSetHandle xQueueSet, portTickType xBlockTimeTicks ) ;




xQueueSetMemberHandle xQueueSelectFromSetFromISR( xQueueSetHandle xQueueSet ) ;


void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait ) ;
long xQueueGenericReset( xQueueHandle xQueue, long xNewQueue ) ;
void vQueueSetQueueNumber( xQueueHandle xQueue, unsigned char ucQueueNumber ) ;
unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue ) ;
unsigned char ucQueueGetQueueType( xQueueHandle xQueue ) ;



}
# 73 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/semphr.h" 2

typedef xQueueHandle xSemaphoreHandle;
# 32 "src/fdvsync.h" 2

# 1 "C:/sviluppo/ESP8266/projects/ESPWebFramework/../../SDK/esp_iot_rtos_sdk-master/include/freertos/queue.h" 1
# 34 "src/fdvsync.h" 2
}



namespace fdv
{


 uint32_t millisISR();
 uint32_t millis();
 uint32_t millisDiff(uint32_t time1, uint32_t time2);
 void DisableWatchDog();
 void EnableWatchDog();
 void EnableInterrupts();
 void DisableInterrupts();
# 64 "src/fdvsync.h"
 class Mutex
 {
  public:
   Mutex()
    : m_handle(__null)
   {
    { ( m_handle ) = xQueueGenericCreate( ( unsigned long ) 1, ( ( unsigned char ) 0U ), ( ( unsigned char ) 3U ) ); if( ( m_handle ) != __null ) { ( void ) xQueueGenericSend( ( xQueueHandle ) ( ( m_handle ) ), __null, ( ( portTickType ) 0U ), ( ( long ) 0 ) ); } };
   }

   ~Mutex()
   {
    vQueueDelete( ( xQueueHandle ) ( m_handle ) );
   }

   bool lock(uint32_t msTimeOut = ( portTickType ) 0xffffffff)
   {
    return xQueueGenericReceive( ( xQueueHandle ) ( m_handle ), __null, ( msTimeOut / ( ( portTickType ) 1000 / ( ( portTickType ) 100 ) ) ), ( ( long ) 0 ) );
   }

   bool lockFromISR()
   {
    signed long xHigherPriorityTaskWoken = ( ( long ) 0 );
    return xQueueReceiveFromISR( ( xQueueHandle ) ( m_handle ), __null, ( &xHigherPriorityTaskWoken ) );
   }

   void unlock()
   {
    xQueueGenericSend( ( xQueueHandle ) ( m_handle ), __null, ( ( portTickType ) 0U ), ( ( long ) 0 ) );
   }

   void unlockFromISR()
   {
    signed long xHigherPriorityTaskWoken = ( ( long ) 0 );
    xQueueGenericSendFromISR( ( xQueueHandle ) ( m_handle ), __null, ( &xHigherPriorityTaskWoken ), ( ( long ) 0 ) );
   }

  private:
   xSemaphoreHandle m_handle;
 };







 class MutexLock
 {
  public:
   MutexLock(Mutex* mutex, uint32_t msTimeOut = ( portTickType ) 0xffffffff)
     : m_mutex(mutex)
   {
    m_acquired = m_mutex->lock(msTimeOut);
   }

   ~MutexLock()
   {
    if (m_acquired)
     m_mutex->unlock();
   }

   operator bool()
   {
    return m_acquired;
   }

  private:
   Mutex* m_mutex;
   bool m_acquired;
 };


 class MutexLockFromISR
 {
  public:
   MutexLockFromISR(Mutex* mutex)
     : m_mutex(mutex)
   {
    m_acquired = m_mutex->lockFromISR();
   }

   ~MutexLockFromISR()
   {
    if (m_acquired)
     m_mutex->unlockFromISR();
   }

   operator bool()
   {
    return m_acquired;
   }

  private:
   Mutex* m_mutex;
   bool m_acquired;
 };
# 168 "src/fdvsync.h"
 class SoftTimeOut
 {
  public:
   SoftTimeOut(uint32_t time)
    : m_timeOut(time), m_startTime(millis())
   {
   }

   operator bool()
   {
    return millisDiff(m_startTime, millis()) > m_timeOut;
   }

   void reset(uint32_t time)
   {
    m_timeOut = time;
    m_startTime = millis();
   }

  private:
   uint32_t m_timeOut;
   uint32_t m_startTime;
 };







 template <typename T>
 class Queue
 {

  public:

   Queue(uint32_t queueLength)
   {
    m_handle = xQueueGenericCreate( queueLength, sizeof(T), ( ( unsigned char ) 0U ) );
   }

   ~Queue()
   {
    vQueueDelete(m_handle);
   }

   bool send(T& item, uint32_t msTimeOut)
   {
    return xQueueGenericSend( ( m_handle ), ( &item ), ( msTimeOut / ( ( portTickType ) 1000 / ( ( portTickType ) 100 ) ) ), ( ( long ) 0 ) );
   }

   bool sendFromISR(T& item)
   {
    signed long xHigherPriorityTaskWoken = ( ( long ) 0 );
    return xQueueGenericSendFromISR( ( m_handle ), ( &item ), ( &xHigherPriorityTaskWoken ), ( ( long ) 0 ) );
   }

   bool receive(T* item, uint32_t msTimeOut)
   {
    return xQueueGenericReceive( ( m_handle ), ( item ), ( msTimeOut / ( ( portTickType ) 1000 / ( ( portTickType ) 100 ) ) ), ( ( long ) 0 ) );
   }

   bool peek(T* item, uint32_t msTimeOut)
   {
    return xQueueGenericReceive( ( m_handle ), ( item ), ( msTimeOut / ( ( portTickType ) 1000 / ( ( portTickType ) 100 ) ) ), ( ( long ) 1 ) );
   }

   void clear()
   {
    xQueueGenericReset( m_handle, ( ( long ) 0 ) );
   }

   uint32_t available()
   {
    return uxQueueMessagesWaiting(m_handle);
   }

  private:

   xQueueHandle m_handle;

 };


}
# 36 "src/fdvserial.h" 2
# 47 "src/fdvserial.h"
namespace fdv
{


 void DisableStdOut();







 class Serial
 {

  public:
   virtual void put(uint8_t value) = 0;
   virtual void write(uint8_t b) = 0;
   virtual int16_t peek() = 0;
   virtual int16_t read() = 0;
   virtual uint16_t available() = 0;
   virtual void flush() = 0;
   virtual bool waitForData(uint32_t timeOutMs = ( portTickType ) 0xffffffff) = 0;


   uint16_t read(uint8_t* buffer, uint16_t bufferLen)
   {
    uint16_t ret = 0;
    for (int16_t c; bufferLen > 0 && (c = read()) > -1; --bufferLen, ++ret)
    {
     *buffer++ = c;
    }
    return ret;
   }


   void writeNewLine()
   {
    write(0x0D);
    write(0x0A);
   }


   void write(uint8_t const* buffer, uint16_t bufferLen)
   {
    for (;bufferLen > 0; --bufferLen)
     write(*buffer++);
   }


   void write(char const* str)
   {
    while (*str)
     write(*str++);
   }

   void writeln(char const* str)
   {
    write(str);
    writeNewLine();
   }

   void writeUInt32(uint32_t value)
   {
    bool printZero = false;
    for (int8_t i = 9; i >= 0; --i)
    {
     uint32_t d = 1;
     for (int8_t j = 0; j != i; ++j)
      d *= 10;
     uint32_t v = value / d;
     if (v != 0 || printZero || i == 0)
     {
      uint8_t c = '0' + v;
      write(c);
      printZero = true;
     }
     value = value - v * d;
    }
   }


 };
# 143 "src/fdvserial.h"
 class HardwareSerial : public Serial
 {
  public:

   explicit HardwareSerial(uint32_t baud_rate, uint32_t rxBufferLength = 128)
    : m_queue(rxBufferLength)
   {
    s_serials[0] = this;
    reconfig(baud_rate);
   }

   void reconfig(uint32_t baud_rate);

   using Serial::write;
   void write(uint8_t b);

   static HardwareSerial* getSerial(uint32_t uart)
   {
    return s_serials[uart];
   }


   void put(uint8_t value)
   {
    m_queue.sendFromISR(value);
   }

   int16_t peek()
   {
    uint8_t ret;
    if (m_queue.peek(&ret, 0))
     return ret;
    return -1;
   }

   int16_t read()
   {
    uint8_t ret;
    if (m_queue.receive(&ret, 0))
     return ret;
    return -1;
   }

   uint16_t available()
   {
    return m_queue.available();
   }

   void flush()
   {
    m_queue.clear();
   }

   bool waitForData(uint32_t timeOutMs = ( portTickType ) 0xffffffff)
   {
    uint8_t b;
    return m_queue.peek(&b, timeOutMs);
   }


  private:

   Queue<uint8_t> m_queue;

   static HardwareSerial* s_serials[1];


 };







}
# 32 "src/user_main.cpp" 2

# 1 "src/fdvflash.h" 1
# 26 "src/fdvflash.h"
extern "C"
{



}
# 46 "src/fdvflash.h"
static uint32_t const FLASHDATABASE = 0x14000;





namespace fdv
{
# 67 "src/fdvflash.h"
 inline void FlashReadonlyDataRead(void const* source, void* dest, uint32_t size)
 {
  DisableInterrupts();
  spi_flash_read((uint32_t)source - 0x40240000 + 0x40000, (uint32*)dest, size);
  EnableInterrupts();
 }







 struct FlashAllocator
 {
  template <typename T>
  static uint32_t allocate(uint32_t itemsCount)
  {
   uint32_t ret = s_pos;
   s_pos += getSectorsCount<T>(itemsCount) * 4096;
   return ret;
  }

  template <typename T>
  static uint16_t getSectorsCount(uint32_t itemsCount)
  {
   return (sizeof(T) * itemsCount + 4096 - 1) / 4096;
  }

 private:
  static uint32_t s_pos;
 };
# 129 "src/fdvflash.h"
 template <typename T>
 struct FlashValue
 {
  FlashValue()
  {
   m_data = FlashAllocator::allocate<T>(1);
  }

  explicit FlashValue(T const& value)
  {
   m_data = FlashAllocator::allocate<T>(1);
   set(value);
  }

  operator const T() const
  {
   return get();
  }

  void operator = (T const& value)
  {
   set(value);
  }

 private:

  void set(T const& value)
  {
   DisableInterrupts();
   for (uint16_t i = 0; i != FlashAllocator::getSectorsCount<T>(1); ++i)
    spi_flash_erase_sector(m_data / 4096 + i);
   spi_flash_write((uint32_t)m_data, (uint32*)&value, sizeof(T));
   EnableInterrupts();
  }

  T const get() const
  {
   T value;
   DisableInterrupts();
   spi_flash_read((uint32_t)m_data, (uint32*)&value, sizeof(T));
   EnableInterrupts();
   return value;
  }

 private:

  uint32_t m_data;
 };




}
# 34 "src/user_main.cpp" 2
# 1 "src/fdvtask.h" 1
# 26 "src/fdvtask.h"
extern "C"
{




}



namespace fdv
{






 class Task
 {
 public:

  Task(uint16_t stackDepth = 256, uint32_t priority = 2)
  {
   xTaskGenericCreate( ( entry ), ( (const signed char*)"" ), ( stackDepth ), ( this ), ( priority ), ( &m_handle ), ( __null ), ( __null ) );
  }

  ~Task()
  {
   vTaskDelete(m_handle);
  }

  void suspend()
  {
   vTaskSuspend(m_handle);
  }

  void resume()
  {
   vTaskResume(m_handle);
  }

  void delay(uint32_t ms)
  {
   vTaskDelay(ms / ( ( portTickType ) 1000 / ( ( portTickType ) 100 ) ));
  }

 public:

  virtual void run() = 0;


 private:

  static void __attribute__((section(".irom0.text"))) entry(void* params)
  {
   static_cast<Task*>(params)->run();
  }

 private:
  xTaskHandle m_handle;

 };


}
# 35 "src/user_main.cpp" 2




struct Task1 : fdv::Task
{

 Task1(fdv::Serial* serial)
  : m_serial(serial)
 {
 }

 fdv::Serial* m_serial;

 struct MyStore
 {
  char nome[16];
  char cognome[16];
  uint32_t seq;
 };

 void __attribute__((section(".irom0.text"))) run()
 {
  fdv::FlashValue<MyStore> mystore;
  while (1)
  {
   if (m_serial->waitForData())
   {
    uint8_t c = m_serial->read();
    switch (c)
    {
     case 'h':
      m_serial->writeln("Comandi disponibili:");
      m_serial->writeln("h    = help");
      m_serial->writeln("r    = reset");
      m_serial->writeln("1..9 = test 1 a 9");
      break;
     case 'r':
      system_restart();
      break;
     case '1':
      {
       MyStore t = mystore;
       strcpy(t.nome, "Fabrizio");
       strcpy(t.cognome, "Di Vittorio");
       t.seq++;
       mystore = t;
       break;
      }
     case '2':
      {
       MyStore t = mystore;
       m_serial->writeln(t.nome);
       m_serial->writeln(t.cognome);
       m_serial->writeUInt32(t.seq); m_serial->writeNewLine();
       break;
      }
      break;
    }
   }
  }
 }

};



struct MainTask : fdv::Task
{
 void __attribute__((section(".irom0.text"))) run()
 {
  fdv::DisableStdOut();
  fdv::DisableWatchDog();

  fdv::HardwareSerial serial(115200, 128);

  Task1 task1(&serial);

  suspend();
 }
};


extern "C" void user_init(void)
{
 new MainTask;
}
